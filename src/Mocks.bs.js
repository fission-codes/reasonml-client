// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var baseURL = "https://hostless.dev";

var strContent = "string content";

var jsonContent = Js_dict.fromList(/* :: */[
      /* tuple */[
        "key1",
        "val1"
      ],
      /* :: */[
        /* tuple */[
          "key2",
          "val2"
        ],
        /* [] */0
      ]
    ]);

var testCID = "QmYp9d8BC2HhDCUVH7JEUZAd6Hbxrc5wBRfUs8TqazJJP9";

var cidList = /* array */[
  "QmYFkqxQM63pcM5RzAQ4Fs9gei8YgHWu6DPWutfUs8Dvze",
  "QmYwXpFw1QGAWxEnQWFwLuVpdbupaBcEz2DTTRRRsCt9WR",
  "QmYp9d8BC2HhDCUVH7JEUZAd6Hbxrc5wBRfUs8TqazJJP9"
];

function isAuthed(_cfg) {
  return (
    _cfg && _cfg.auth &&
    _cfg.auth.username === username &&
    _cfg.auth.password === password
  );
}

function failureResp(param) {
  return Promise.resolve({
              data: ({}),
              status: 500,
              statusText: "Something went wrong",
              config: { },
              headers: ({"content-type": "application/octet-stream"})
            });
}

function dataResp(_data) {
  return Promise.resolve({
              data: _data,
              status: 200,
              statusText: "OK",
              config: { },
              headers: ({"content-type": "application/octet-stream"})
            });
}

function get(url) {
  var correctURL = url.startsWith("https://hostless.dev/ipfs/");
  if (correctURL) {
    var cid = Caml_array.caml_array_get(url.split("https://hostless.dev/ipfs/"), 1);
    switch (cid) {
      case "QmYFkqxQM63pcM5RzAQ4Fs9gei8YgHWu6DPWutfUs8Dvze" : 
          return dataResp(strContent);
      case "QmYwXpFw1QGAWxEnQWFwLuVpdbupaBcEz2DTTRRRsCt9WR" : 
          return dataResp(jsonContent);
      default:
        return failureResp(/* () */0);
    }
  } else {
    return failureResp(/* () */0);
  }
}

function getc(url, cfg) {
  var correctURL = url === "https://hostless.dev/ipfs/cids";
  if (correctURL && isAuthed(cfg)) {
    return dataResp(cidList);
  } else {
    return failureResp(/* () */0);
  }
}

function postDatac(url, _data, cfg) {
  var correctURL = url === "https://hostless.dev/ipfs";
  if (correctURL && isAuthed(cfg)) {
    return dataResp(testCID);
  } else {
    return failureResp(/* () */0);
  }
}

function putDatac(url, _data, cfg) {
  var correctURL = url === "https://hostless.dev/ipfs";
  if (!correctURL || !isAuthed(cfg)) {
    return failureResp(/* () */0);
  } else {
    var cid = Caml_array.caml_array_get(url.split("https://hostless.dev/ipfs/"), 1);
    var validCID = List.mem(cid, $$Array.to_list(cidList));
    if (validCID) {
      return dataResp({ });
    } else {
      return failureResp(/* () */0);
    }
  }
}

function deletec(url, cfg) {
  var correctURL = url === "https://hostless.dev/ipfs";
  if (!correctURL || !isAuthed(cfg)) {
    return failureResp(/* () */0);
  } else {
    var cid = Caml_array.caml_array_get(url.split("https://hostless.dev/ipfs/"), 1);
    var validCID = List.mem(cid, $$Array.to_list(cidList));
    if (validCID) {
      return dataResp({ });
    } else {
      return failureResp(/* () */0);
    }
  }
}

var Axios_mock = /* module */[
  /* get */get,
  /* getc */getc,
  /* postDatac */postDatac,
  /* putDatac */putDatac,
  /* deletec */deletec
];

var username = "test_username";

var password = "test_password";

var strCID = "QmYFkqxQM63pcM5RzAQ4Fs9gei8YgHWu6DPWutfUs8Dvze";

var jsonCID = "QmYwXpFw1QGAWxEnQWFwLuVpdbupaBcEz2DTTRRRsCt9WR";

exports.baseURL = baseURL;
exports.username = username;
exports.password = password;
exports.strContent = strContent;
exports.strCID = strCID;
exports.jsonContent = jsonContent;
exports.jsonCID = jsonCID;
exports.testCID = testCID;
exports.cidList = cidList;
exports.isAuthed = isAuthed;
exports.failureResp = failureResp;
exports.dataResp = dataResp;
exports.Axios_mock = Axios_mock;
/* jsonContent Not a pure module */
